main.cpp


// main.cpp

#include <glad/gl.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include "helpers/camera.h"
#include "objects/skybox.h"
#include "objects/sun.h"
#include "objects/building.h"
#include "objects/cloud.h"
#include "objects/ground.h"

#include <vector>
#include <cstdlib>
#include <ctime>
#include <iostream>

#include "helpers/postprocess.h"  // For HDR/Bloom pipeline

// Callback functions (mouse_callback, key_callback) should be defined or implemented elsewhere

GLFWwindow* window = nullptr; 
int UsedTextureIndex = 0;

// Camera variables (assuming these are defined in "helpers/camera.h")
extern glm::vec3 cameraPos;
extern glm::vec3 cameraFront;
extern glm::vec3 cameraUp;

// Function to display camera position every second (assuming it's defined elsewhere)
extern void ShowCameraPosEverySecond();

int main()
{
    srand(static_cast<unsigned int>(time(nullptr)));

    if (!glfwInit()) {
        std::cerr << "Failed to init GLFW\n";
        return -1;
    }

    // Setup OpenGL version and profile
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // For macOS
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // Create window
    window = glfwCreateWindow(1024, 768, "Skybox + Building + Cloud + HDR + Bloom", nullptr, nullptr);
    if (!window) {
        std::cerr << "Failed to open GLFW window\n";
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    // Setup input modes and callbacks
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
    glfwSetCursorPosCallback(window, mouse_callback); // Implemented elsewhere
    glfwSetKeyCallback(window, key_callback);         // Implemented elsewhere

    // Initialize GLAD
    if (!gladLoadGL(glfwGetProcAddress)) {
        std::cerr << "Failed to load GL\n";
        return -1;
    }

    // Set OpenGL state
    glClearColor(0.2f, 0.2f, 0.25f, 1.0f);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);
    glEnable(GL_CULL_FACE);


    // 1. Initialize HDR/Bloom
    int screenWidth, screenHeight;
    glfwGetFramebufferSize(window, &screenWidth, &screenHeight);
    InitHDRBloom(screenWidth, screenHeight);

    // 2. Create Skybox
    Skybox skybox;
    skybox.initialize(glm::vec3(0.0f), glm::vec3(50.0f));

    glm::vec3 lightPos(50.0f, 50.0f, 50.0f);

    // 3. Create Sun
    Sun sunOne;
    sunOne.initialize(lightPos, glm::vec3(5.0f));

    // 4. Create Buildings
    const char* facadeTextures[] = {
        "../assets/tex/minecraft/block/grass_block_top.png"
    };
    std::vector<Building> buildings;
    {
        const float spacing = 8.0f;
        const float size = 2.0f;
        const int rows = 6;
        const int cols = 6;
        const float heightMid = 2.0f;
        float xOffset = (rows - 1) * (size + spacing) / 2.0f;
        float zOffset = (cols - 1) * (size + spacing) / 2.0f;

        for(int i = 0; i < rows; ++i) {
            for(int j = 0; j < cols; ++j) {
                float x = i * (size + spacing) - xOffset;
                float z = j * (size + spacing) - zOffset;
                float height = heightMid + (rand() / (float)RAND_MAX) * heightMid;
                glm::vec3 position(x, height, z);
                glm::vec3 bscale(size, height, size);

                Building b;
                b.initialize(position, bscale, facadeTextures[0]);
                buildings.push_back(b);
            }
        }
    }

    // 5. Create Grounds
    std::vector<Building> grounds;
    const char* groundTextures[] = {
        "../assets/tex/minecraft/block/dirt.png",
        "../assets/tex/minecraft/block/grass_block_top.png",
        "../assets/tex/minecraft/block/stone.png",
        "../assets/tex/minecraft/block/gravel.png"
    };

    const int groundCountX = 2;
    const int groundCountZ = 2;
    const int groundSizeX = 50;
    const int groundSizeZ = 50;
    for(int i = 0; i < groundCountX; ++i) {
        for(int j = 0; j < groundCountZ; ++j) {
            Building g;
            // Arrange them in a 2x2 grid
            float x = i * groundSizeX * 2;
            float z = j * groundSizeZ * 2;
            glm::vec3 position(x, -1.0f, z);
            glm::vec3 scale(groundSizeX, 0.1f, groundSizeZ);
            g.initialize(position, scale, groundTextures[i * groundCountZ + j]);
            grounds.push_back(g);
        }
    }

    // 6. Create Clouds
    Cloud myCloud;
    myCloud.initialize(glm::vec3(50.0f, -30.0f, 50.0f), glm::vec3(1.0f));
    //myCloud.initialize(glm::vec3(50.0f, 50.0f, 100.0f), glm::vec3(10.0f));

    // Setup projection matrix
    float FoV   = 45.0f;
    float zNear = 0.1f;
    float zFar  = 1000.0f;
    glm::mat4 projection = glm::perspective(glm::radians(FoV), (float)screenWidth / (float)screenHeight, zNear, zFar);

    int flip = 0;

    while (!glfwWindowShouldClose(window)) 
    {
        // 1. Bind HDR framebuffer & clear
        glBindFramebuffer(GL_FRAMEBUFFER, hdrFBO);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // 2. Render the scene as usual
        // Handle texture selection for skybox
        if (glfwGetKey(window, GLFW_KEY_1) == GLFW_PRESS) { UsedTextureIndex=0; flip=0; }
        if (glfwGetKey(window, GLFW_KEY_2) == GLFW_PRESS) { UsedTextureIndex=1; flip=0; }
        if (glfwGetKey(window, GLFW_KEY_3) == GLFW_PRESS) { UsedTextureIndex=2; flip=1; }
        if (glfwGetKey(window, GLFW_KEY_4) == GLFW_PRESS) { UsedTextureIndex=3; flip=1; }

        // Build camera's view matrix
        glm::mat4 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);

        // Skybox: remove translation from view
        glm::mat4 skyboxView = glm::mat4(glm::mat3(view));
        glCullFace(GL_FRONT);
        glm::mat4 skyboxVP = projection * skyboxView;
        skybox.render(skyboxVP, flip);

        // Buildings
        glCullFace(GL_BACK);
        glm::mat4 buildingVP = projection * view;
        for(auto &b : buildings) {
            b.render(buildingVP, lightPos, cameraPos);
        }
        // Grounds
        for(auto &g : grounds) {
            g.render(buildingVP, lightPos, cameraPos);
        }

        // Sun
        sunOne.render(buildingVP);

        // Clouds
        glDisable(GL_CULL_FACE);
        myCloud.render(buildingVP, lightPos, cameraPos);
        glEnable(GL_CULL_FACE);
        glCullFace(GL_BACK);

        // Done rendering scene to HDR FBO
        glBindFramebuffer(GL_FRAMEBUFFER, 0);

        // 3. Bloom Passes
        // a) Extract bright areas
        ExtractBright(hdrColorBuffer);

        // b) Blur the bright areas
        BlurBrightTexture();

        // c) Final Pass: Combine + Tone Map
        RenderHDRBloomFinal(hdrColorBuffer, 1.0f /*exposure*/); // Start with 1.0f exposure

        // 4. Print camera once per second in console
        ShowCameraPosEverySecond();

        // Swap buffers and poll events
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // Cleanup
    skybox.cleanup();
    for (auto &b : buildings) {
        b.cleanup();
    }
    for(auto &g : grounds) {
        g.cleanup();
    }
    myCloud.cleanup();
    sunOne.cleanup();

    CleanupPostProcess(); // Cleanup post-processing resources

    glfwTerminate();
    return 0;
}




postprocess.h

// postprocess.h

#ifndef POSTPROCESS_H
#define POSTPROCESS_H

#include <glad/gl.h>

// HDR Framebuffer and attachments
extern unsigned int hdrFBO;
extern unsigned int hdrColorBuffer;
extern unsigned int rboDepth;

// Bright Extraction Framebuffer
extern unsigned int brightFBO;
extern unsigned int brightTexture;

// Ping-Pong Framebuffers for Gaussian blur
extern unsigned int pingpongFBO[2];
extern unsigned int pingpongColorbuffers[2];

// Fullscreen Quad VAO/VBO
extern unsigned int quadVAO;
extern unsigned int quadVBO;

// Shader program IDs
extern GLuint brightExtractProgram;
extern GLuint blurProgram;
extern GLuint bloomFinalProgram;

// Initialize HDR and Bloom pipeline
void InitHDRBloom(unsigned int width, unsigned int height);

// Extract bright areas from the scene
void ExtractBright(unsigned int sceneTexture);

// Apply Gaussian blur to the bright areas
void BlurBrightTexture();

// Combine the blurred bright areas with the original scene and apply tone mapping
void RenderHDRBloomFinal(unsigned int sceneTex, float exposure);

// Cleanup function
void CleanupPostProcess();

#endif // POSTPROCESS_H


postprocess.cpp

// postprocess.cpp

#include "postprocess.h"
#include <iostream>
#include <glm/glm.hpp>
#include "../render/shader.h" // For LoadShadersFromFile

// Define extern variables
unsigned int hdrFBO         = 0;
unsigned int hdrColorBuffer = 0;
unsigned int rboDepth       = 0;

// Bright Extraction Framebuffer and Texture
unsigned int brightFBO     = 0;
unsigned int brightTexture = 0;

// Ping-Pong Framebuffers for Gaussian blur
unsigned int pingpongFBO[2]         = {0, 0};
unsigned int pingpongColorbuffers[2] = {0, 0};

// Fullscreen Quad VAO/VBO
unsigned int quadVAO = 0;
unsigned int quadVBO = 0;

// Shader program IDs
GLuint brightExtractProgram = 0;
GLuint blurProgram          = 0;
GLuint bloomFinalProgram    = 0;

// Quad vertices
static float quadVertices[] = {
    // positions   // texCoords
    -1.0f,  1.0f,  0.0f, 1.0f,
    -1.0f, -1.0f,  0.0f, 0.0f,
     1.0f,  1.0f,  1.0f, 1.0f,
     1.0f, -1.0f,  1.0f, 0.0f,
};

// Declare lastPingPong as a static global variable
static unsigned int lastPingPong = 0; // Tracks the last ping-pong buffer used

// Render a fullscreen quad
static void RenderQuad()
{
    if (quadVAO == 0)
    {
        glGenVertexArrays(1, &quadVAO);
        glGenBuffers(1, &quadVBO);
        glBindVertexArray(quadVAO);
        glBindBuffer(GL_ARRAY_BUFFER, quadVBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(quadVertices), &quadVertices, GL_STATIC_DRAW);

        // Position attribute
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(
            0, 
            2, 
            GL_FLOAT, 
            GL_FALSE, 
            4 * sizeof(float), 
            (void*)0
        );

        // TexCoords attribute
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(
            1, 
            2, 
            GL_FLOAT, 
            GL_FALSE, 
            4 * sizeof(float), 
            (void*)(2 * sizeof(float))
        );
    }

    glBindVertexArray(quadVAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);
}

void InitHDRBloom(unsigned int width, unsigned int height)
{
    // 1. HDR Framebuffer
    glGenFramebuffers(1, &hdrFBO);
    glBindFramebuffer(GL_FRAMEBUFFER, hdrFBO);

    // Create floating point color buffer
    glGenTextures(1, &hdrColorBuffer);
    glBindTexture(GL_TEXTURE_2D, hdrColorBuffer);
    glTexImage2D(
        GL_TEXTURE_2D, 0, GL_RGBA16F, 
        width, height, 
        0, GL_RGBA, GL_FLOAT, NULL
    );
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    // Attach to FBO
    glFramebufferTexture2D(
        GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
        GL_TEXTURE_2D, hdrColorBuffer, 0
    );

    // Create renderbuffer for depth
    glGenRenderbuffers(1, &rboDepth);
    glBindRenderbuffer(GL_RENDERBUFFER, rboDepth);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT24, width, height);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, rboDepth);

    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
        std::cout << "HDR Framebuffer not complete!" << std::endl;
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // 2. Bright-extraction Framebuffer
    glGenFramebuffers(1, &brightFBO);
    glBindFramebuffer(GL_FRAMEBUFFER, brightFBO);

    // Create bright texture
    glGenTextures(1, &brightTexture);
    glBindTexture(GL_TEXTURE_2D, brightTexture);
    glTexImage2D(
        GL_TEXTURE_2D, 0, GL_RGBA16F, 
        width, height, 
        0, GL_RGBA, GL_FLOAT, NULL
    );
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    // Attach to FBO
    glFramebufferTexture2D(
        GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
        GL_TEXTURE_2D, brightTexture, 0
    );

    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
        std::cout << "Bright Extraction Framebuffer not complete!" << std::endl;
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // 3. Ping-Pong Framebuffers for Gaussian blur
    glGenFramebuffers(2, pingpongFBO);
    glGenTextures(2, pingpongColorbuffers);
    for (unsigned int i = 0; i < 2; i++)
    {
        glBindFramebuffer(GL_FRAMEBUFFER, pingpongFBO[i]);
        glBindTexture(GL_TEXTURE_2D, pingpongColorbuffers[i]);
        glTexImage2D(
            GL_TEXTURE_2D, 0, GL_RGBA16F, 
            width, height, 
            0, GL_RGBA, GL_FLOAT, NULL
        );
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        glFramebufferTexture2D(
            GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, 
            GL_TEXTURE_2D, pingpongColorbuffers[i], 0
        );
        if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
            std::cout << "Ping-Pong Framebuffer " << i << " not complete!" << std::endl;
    }
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // 4. Load the three post-processing shaders
    brightExtractProgram = LoadShadersFromFile(
        "../todhchai/shaders/screenQuad.vert", 
        "../todhchai/shaders/brightExtract.frag"
    );
    if (brightExtractProgram == 0) {
        std::cout << "Failed to load brightExtractProgram" << std::endl;
    }

    blurProgram = LoadShadersFromFile(
        "../todhchai/shaders/screenQuad.vert", 
        "../todhchai/shaders/blur.frag"
    );
    if (blurProgram == 0) {
        std::cout << "Failed to load blurProgram" << std::endl;
    }

    bloomFinalProgram = LoadShadersFromFile(
        "../todhchai/shaders/screenQuad.vert", 
        "../todhchai/shaders/bloomFinal.frag"
    );
    if (bloomFinalProgram == 0) {
        std::cout << "Failed to load bloomFinalProgram" << std::endl;
    }
}

void ExtractBright(unsigned int sceneTexture)
{
    // Use brightExtractProgram
    glUseProgram(brightExtractProgram);

    // Set uniforms
    GLint locScene = glGetUniformLocation(brightExtractProgram, "scene");
    glUniform1i(locScene, 0);

    // Bind scene texture to texture unit 0
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, sceneTexture);

    // Bind to brightFBO
    glBindFramebuffer(GL_FRAMEBUFFER, brightFBO);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Render quad
    RenderQuad();

    // Unbind framebuffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void BlurBrightTexture()
{
    bool horizontal = true;
    bool first_iteration = true;
    unsigned int amount = 50; // Number of blur passes

    glUseProgram(blurProgram);
    GLint locHorizontal = glGetUniformLocation(blurProgram, "horizontal");

    for (unsigned int i = 0; i < amount; i++)
    {
        glBindFramebuffer(GL_FRAMEBUFFER, pingpongFBO[horizontal]);
        glUniform1i(locHorizontal, horizontal ? 1 : 0);

        // Bind the appropriate texture
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, first_iteration ? brightTexture 
                                                    : pingpongColorbuffers[!horizontal]);

        // Render quad
        RenderQuad();

        horizontal = !horizontal;
        if (first_iteration)
            first_iteration = false;
        lastPingPong = !horizontal; // Track the last used buffer
    }
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void RenderHDRBloomFinal(unsigned int sceneTex, float exposure)
{
    glUseProgram(bloomFinalProgram);

    // Set uniforms
    GLint locScene = glGetUniformLocation(bloomFinalProgram, "scene");
    GLint locBloom = glGetUniformLocation(bloomFinalProgram, "bloomBlur");
    GLint locExposure = glGetUniformLocation(bloomFinalProgram, "exposure");

    glUniform1i(locScene, 0);
    glUniform1i(locBloom, 1);
    glUniform1f(locExposure, exposure);

    // Bind scene texture to texture unit 0
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, sceneTex);

    // Bind blurred bright texture to texture unit 1
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, pingpongColorbuffers[lastPingPong]);

    // Render to default framebuffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Render quad
    RenderQuad();
}

void CleanupPostProcess()
{
    // Delete framebuffers and textures
    glDeleteFramebuffers(1, &hdrFBO);
    glDeleteTextures(1, &hdrColorBuffer);
    glDeleteRenderbuffers(1, &rboDepth);

    glDeleteFramebuffers(1, &brightFBO);
    glDeleteTextures(1, &brightTexture);

    glDeleteFramebuffers(2, pingpongFBO);
    glDeleteTextures(2, pingpongColorbuffers);

    // Delete quad VAO/VBO
    glDeleteVertexArrays(1, &quadVAO);
    glDeleteBuffers(1, &quadVBO);

    // Delete shader programs
    glDeleteProgram(brightExtractProgram);
    glDeleteProgram(blurProgram);
    glDeleteProgram(bloomFinalProgram);
}


// shaders/bloomFinal.frag

#version 330 core

in vec2 TexCoords;
out vec4 FragColor;

uniform sampler2D scene;      // the full HDR scene
uniform sampler2D bloomBlur;  // blurred bright
uniform float exposure;

void main()
{
    // Retrieve HDR color
    vec3 hdrColor = texture(scene, TexCoords).rgb;
    // Retrieve Bloom color
    vec3 bloomColor = texture(bloomBlur, TexCoords).rgb;
    // Combine HDR and Bloom
    hdrColor += bloomColor;

    // Reinhard Tone Mapping
    vec3 mapped = hdrColor / (hdrColor + vec3(1.0));

    // Gamma Correction
    float gamma = 2.2;
    mapped = pow(mapped, vec3(1.0 / gamma));

    FragColor = vec4(mapped, 1.0);
}



// shaders/blur.frag

#version 330 core

in vec2 TexCoords;
out vec4 FragColor;

uniform sampler2D image;
uniform bool horizontal;

// Expanded Gaussian weights (9-tap)
const float weight[9] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216, 0.005424, 0.001356, 0.000341, 0.000085);

void main()
{
    vec2 texOffset = 1.0 / textureSize(image, 0); // Size of single texel
    vec3 result = texture(image, TexCoords).rgb * weight[0];
    for(int i = 1; i < 9; ++i)
    {
        if(horizontal)
        {
            result += texture(image, TexCoords + vec2(texOffset.x * i, 0.0)).rgb * weight[i];
            result += texture(image, TexCoords - vec2(texOffset.x * i, 0.0)).rgb * weight[i];
        }
        else
        {
            result += texture(image, TexCoords + vec2(0.0, texOffset.y * i)).rgb * weight[i];
            result += texture(image, TexCoords - vec2(0.0, texOffset.y * i)).rgb * weight[i];
        }
    }
    FragColor = vec4(result, 1.0);
}



// shaders/brightExtract.frag

#version 330 core

in vec2 TexCoords;
out vec4 FragColor;

uniform sampler2D scene;

void main()
{
    vec3 color = texture(scene, TexCoords).rgb;
    // Calculate luminance
    float brightness = dot(color, vec3(0.2126, 0.7152, 0.0722));
    float threshold = 1.5; // Try lowering to 0.4 or 0.3
    if(brightness > threshold)
        FragColor = vec4(color, 1.0);
    else
        FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}




// shaders/screenQuad.vert

#version 330 core
layout (location = 0) in vec2 inPos;
layout (location = 1) in vec2 inTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = inTexCoords;
    gl_Position = vec4(inPos, 0.0, 1.0);
}


building.cpp
#include "building.h"
#include "../helpers/texture.h"         // for LoadTextureTileBox
#include <render/shader.h>              // your custom shader loader
#include <glm/gtc/matrix_transform.hpp>
#include <iostream>
#include <cstdlib>



// Example: Adding normals for each face of the cube
GLfloat vertex_buffer_data_with_normals[] = {
    // Positions          // Normals
    // Front face
    -1.0f, -1.0f,  1.0f,  0.0f,  0.0f,  1.0f,
     1.0f, -1.0f,  1.0f,  0.0f,  0.0f,  1.0f,
     1.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f,
    -1.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f,

    // Back face
     1.0f, -1.0f, -1.0f,  0.0f,  0.0f, -1.0f,
    -1.0f, -1.0f, -1.0f,  0.0f,  0.0f, -1.0f,
    -1.0f,  1.0f, -1.0f,  0.0f,  0.0f, -1.0f,
     1.0f,  1.0f, -1.0f,  0.0f,  0.0f, -1.0f,

    // Left face
    -1.0f, -1.0f, -1.0f, -1.0f,  0.0f,  0.0f,
    -1.0f, -1.0f,  1.0f, -1.0f,  0.0f,  0.0f,
    -1.0f,  1.0f,  1.0f, -1.0f,  0.0f,  0.0f,
    -1.0f,  1.0f, -1.0f, -1.0f,  0.0f,  0.0f,

    // Right face
     1.0f, -1.0f,  1.0f,  1.0f,  0.0f,  0.0f,
     1.0f, -1.0f, -1.0f,  1.0f,  0.0f,  0.0f,
     1.0f,  1.0f, -1.0f,  1.0f,  0.0f,  0.0f,
     1.0f,  1.0f,  1.0f,  1.0f,  0.0f,  0.0f,

    // Top face
    -1.0f,  1.0f,  1.0f,  0.0f,  1.0f,  0.0f,
     1.0f,  1.0f,  1.0f,  0.0f,  1.0f,  0.0f,
     1.0f,  1.0f, -1.0f,  0.0f,  1.0f,  0.0f,
    -1.0f,  1.0f, -1.0f,  0.0f,  1.0f,  0.0f,

    // Bottom face
    -1.0f, -1.0f, -1.0f,  0.0f, -1.0f,  0.0f,
     1.0f, -1.0f, -1.0f,  0.0f, -1.0f,  0.0f,
     1.0f, -1.0f,  1.0f,  0.0f, -1.0f,  0.0f,
    -1.0f, -1.0f,  1.0f,  0.0f, -1.0f,  0.0f,
};

GLfloat color_buffer_data[72] = {
    // Front, red
    1.0f, 0.0f, 0.0f,
    1.0f, 0.0f, 0.0f,
    1.0f, 0.0f, 0.0f,
    1.0f, 0.0f, 0.0f,

    // Back, yellow
    1.0f, 1.0f, 0.0f,
    1.0f, 1.0f, 0.0f,
    1.0f, 1.0f, 0.0f,
    1.0f, 1.0f, 0.0f,

    // Left, green
    0.0f, 1.0f, 0.0f,
    0.0f, 1.0f, 0.0f,
    0.0f, 1.0f, 0.0f,
    0.0f, 1.0f, 0.0f,

    // Right, cyan
    0.0f, 1.0f, 1.0f,
    0.0f, 1.0f, 1.0f,
    0.0f, 1.0f, 1.0f,
    0.0f, 1.0f, 1.0f,

    // Top, blue
    0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f,

    // Bottom, magenta
    1.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 1.0f,
    1.0f, 0.0f, 1.0f,
};

GLuint index_buffer_data[36] = {
    0, 1, 2,   0, 2, 3,
    4, 5, 6,   4, 6, 7,
    8, 9, 10,  8, 10, 11,
    12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19,
    20, 21, 22, 20, 22, 23,
};


// Existing vertex_buffer_data_with_normals and index_buffer_data remain unchanged

void Building::initialize(glm::vec3 pos, glm::vec3 scl, const char* texturePath) {
    this->position = pos;
    this->scale    = scl;

    // Create and bind the VAO
    glGenVertexArrays(1, &vertexArrayID);
    glBindVertexArray(vertexArrayID);

    // --- Position & Normal buffer ---
    glGenBuffers(1, &vertexBufferID);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferID);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertex_buffer_data_with_normals), vertex_buffer_data_with_normals, GL_STATIC_DRAW);

    // Enable attribute 0 for vertex position
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(
        0,                  // Layout location = 0
        3,                  // 3 floats (x,y,z)
        GL_FLOAT,
        GL_FALSE,
        6 * sizeof(GLfloat),// Stride (positions + normals)
        (void*)0            // Offset
    );

    // Enable attribute 2 for vertex normals
    glEnableVertexAttribArray(2);
    glVertexAttribPointer(
        2,                                  // Layout location = 2
        3,                                  // 3 floats (nx, ny, nz)
        GL_FLOAT,
        GL_FALSE,
        6 * sizeof(GLfloat),                // Stride
        (void*)(3 * sizeof(GLfloat))        // Offset
    );

    // --- Dynamic UV buffer ---
    GLfloat dynamic_uv_buffer_data[48]; // 24 vertices * 2 UVs

    // Front face UVs (U: x, V: y)
    dynamic_uv_buffer_data[0]  = 0.0f;
    dynamic_uv_buffer_data[1]  = 0.0f;
    dynamic_uv_buffer_data[2]  = 2.0f * scl.x; // Repeat texture every 1 unit
    dynamic_uv_buffer_data[3]  = 0.0f;
    dynamic_uv_buffer_data[4]  = 2.0f * scl.x;
    dynamic_uv_buffer_data[5]  = 2.0f * scl.y;
    dynamic_uv_buffer_data[6]  = 0.0f;
    dynamic_uv_buffer_data[7]  = 2.0f * scl.y;

    // Back face UVs (U: x, V: y)
    dynamic_uv_buffer_data[8]  = 0.0f;
    dynamic_uv_buffer_data[9]  = 0.0f;
    dynamic_uv_buffer_data[10] = 2.0f * scl.x;
    dynamic_uv_buffer_data[11] = 0.0f;
    dynamic_uv_buffer_data[12] = 2.0f * scl.x;
    dynamic_uv_buffer_data[13] = 2.0f * scl.y;
    dynamic_uv_buffer_data[14] = 0.0f;
    dynamic_uv_buffer_data[15] = 2.0f * scl.y;

    // Left face UVs (U: z, V: y)
    dynamic_uv_buffer_data[16] = 0.0f;
    dynamic_uv_buffer_data[17] = 0.0f;
    dynamic_uv_buffer_data[18] = 2.0f * scl.z;
    dynamic_uv_buffer_data[19] = 0.0f;
    dynamic_uv_buffer_data[20] = 2.0f * scl.z;
    dynamic_uv_buffer_data[21] = 2.0f * scl.y;
    dynamic_uv_buffer_data[22] = 0.0f;
    dynamic_uv_buffer_data[23] = 2.0f * scl.y;

    // Right face UVs (U: z, V: y)
    dynamic_uv_buffer_data[24] = 0.0f;
    dynamic_uv_buffer_data[25] = 0.0f;
    dynamic_uv_buffer_data[26] = 2.0f * scl.z;
    dynamic_uv_buffer_data[27] = 0.0f;
    dynamic_uv_buffer_data[28] = 2.0f * scl.z;
    dynamic_uv_buffer_data[29] = 2.0f * scl.y;
    dynamic_uv_buffer_data[30] = 0.0f;
    dynamic_uv_buffer_data[31] = 2.0f * scl.y;

    // Top face UVs (U: x, V: z)
    dynamic_uv_buffer_data[32] = 0.0f;
    dynamic_uv_buffer_data[33] = 0.0f;
    dynamic_uv_buffer_data[34] = 2.0f * scl.x; // Adjust based on X scale
    dynamic_uv_buffer_data[35] = 0.0f;
    dynamic_uv_buffer_data[36] = 2.0f * scl.x;
    dynamic_uv_buffer_data[37] = 2.0f * scl.z; // Adjust based on Z scale
    dynamic_uv_buffer_data[38] = 0.0f;
    dynamic_uv_buffer_data[39] = 2.0f * scl.z;

    // Bottom face UVs (U: x, V: z)
    dynamic_uv_buffer_data[40] = 0.0f;
    dynamic_uv_buffer_data[41] = 0.0f;
    dynamic_uv_buffer_data[42] = 2.0f * scl.x; // Adjust based on X scale
    dynamic_uv_buffer_data[43] = 0.0f;
    dynamic_uv_buffer_data[44] = 2.0f * scl.x;
    dynamic_uv_buffer_data[45] = 2.0f * scl.z; // Adjust based on Z scale
    dynamic_uv_buffer_data[46] = 0.0f;
    dynamic_uv_buffer_data[47] = 2.0f * scl.z;

    // Load UV buffer
    glGenBuffers(1, &uvBufferID);
    glBindBuffer(GL_ARRAY_BUFFER, uvBufferID);
    glBufferData(GL_ARRAY_BUFFER, sizeof(dynamic_uv_buffer_data), dynamic_uv_buffer_data, GL_STATIC_DRAW);

    // Enable attribute 1 for UV
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(
        1,                  // Layout location = 1
        2,                  // 2 floats (u,v)
        GL_FLOAT,
        GL_FALSE,
        0,
        (void*)0
    );

    // --- Index buffer ---
    glGenBuffers(1, &indexBufferID);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(index_buffer_data), index_buffer_data, GL_STATIC_DRAW);

    // Load and compile shaders
    programID = LoadShadersFromFile("../todhchai/shaders/box.vert", "../todhchai/shaders/box.frag");
    if (programID == 0) {
        std::cerr << "Failed to load building shaders." << std::endl;
    }

    // Get uniform locations
    mvpMatrixID      = glGetUniformLocation(programID, "MVP");
    modelMatrixID    = glGetUniformLocation(programID, "Model");
    textureSamplerID = glGetUniformLocation(programID, "textureSampler");
    lightPosID       = glGetUniformLocation(programID, "lightPos");
    viewPosID       = glGetUniformLocation(programID, "viewPos");
    lightColorID     = glGetUniformLocation(programID, "lightColor");
    objectColorID    = glGetUniformLocation(programID, "objectColor");

    // Pick a random texture
    textureID = LoadTextureTileBox(texturePath, false, true);
    if (textureID == 0) {
        std::cerr << "Error: Failed to load texture at path: " << texturePath << std::endl;
    }

    glBindVertexArray(0);
}




void Building::render(const glm::mat4& vp, glm::vec3 lightPos, glm::vec3 viewPos) {
    if (programID == 0 || textureID == 0) {
        std::cerr << "Error: Shader program or texture not initialized." << std::endl;
        return;
    }

    glUseProgram(programID);
    glBindVertexArray(vertexArrayID);

    // Model transform
    glm::mat4 modelMatrix(1.0f);
    modelMatrix = glm::translate(modelMatrix, position);
    modelMatrix = glm::scale(modelMatrix, scale);

    // Calculate MVP matrix
    glm::mat4 mvp = vp * modelMatrix;

    // Set uniform values
    glUniformMatrix4fv(mvpMatrixID, 1, GL_FALSE, &mvp[0][0]);
    glUniformMatrix4fv(modelMatrixID, 1, GL_FALSE, &modelMatrix[0][0]);

    // 6. Set light/uniforms
    glm::vec3 lightColor(1.0f, 1.0f, 1.0f);
    glm::vec3 objectColor(1.0f, 1.0f, 1.0f);

    glUniform3fv(lightPosID, 1, &lightPos[0]);
    glUniform3fv(viewPosID, 1, &viewPos[0]);
    glUniform3fv(lightColorID, 1, &lightColor[0]);
    glUniform3fv(objectColorID, 1, &objectColor[0]);

    // Bind texture
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, textureID);
    glUniform1i(textureSamplerID, 0);

    // Draw the cube using element array
    glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);

    // Cleanup
    glBindVertexArray(0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
}

void Building::cleanup() {
    if (vertexBufferID != 0)
        glDeleteBuffers(1, &vertexBufferID);
    if (uvBufferID != 0)
        glDeleteBuffers(1, &uvBufferID);
    if (indexBufferID != 0)
        glDeleteBuffers(1, &indexBufferID);
    if (vertexArrayID != 0)
        glDeleteVertexArrays(1, &vertexArrayID);
    if (textureID != 0)
        glDeleteTextures(1, &textureID);
    if (programID != 0)
        glDeleteProgram(programID);
}


building.h

// building.h
#ifndef BUILDING_H
#define BUILDING_H

#include <glm/glm.hpp>
#include <glad/gl.h>

class Building {
public:
    void initialize(glm::vec3 pos, glm::vec3 scl);
    void initialize(glm::vec3 pos, glm::vec3 scl, const char* texturePath);

    void render(const glm::mat4& vp, glm::vec3 lightPos, glm::vec3 viewPos);
    void cleanup();

private:
    glm::vec3 position;
    glm::vec3 scale;

    GLuint vertexArrayID;
    GLuint vertexBufferID;
    GLuint uvBufferID;
    GLuint indexBufferID;
    GLuint textureID;

    GLuint programID;
    GLuint mvpMatrixID;
    GLuint modelMatrixID;      // New
    GLuint textureSamplerID;   // New
    GLuint lightPosID;         // New
    GLuint viewPosID;         // New
    GLuint lightColorID;       // New
    GLuint objectColorID;      // New
};

#endif // BUILDING_H


texture.cpp

#include "texture.h"
#include <iostream>

#define STB_IMAGE_IMPLEMENTATION
#include <stb/stb_image.h>


GLuint LoadTextureTileBox(const char* filePath, bool generateMipmaps, bool flip) {

    stbi_set_flip_vertically_on_load(flip);

    GLuint textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);

    // Set texture wrapping parameters to GL_REPEAT
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); // Horizontal tiling
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); // Vertical tiling

    // Set texture filtering parameters to GL_NEAREST for sharpness
    if (generateMipmaps) {
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST);
    } else {
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    }
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    // Load image using stb_image or your preferred library
    int width, height, nrChannels;
    unsigned char* data = stbi_load(filePath, &width, &height, &nrChannels, 0);
    if (data) {
        GLenum format;
        if (nrChannels == 1)
            format = GL_RED;
        else if (nrChannels == 3)
            format = GL_RGB;
        else if (nrChannels == 4)
            format = GL_RGBA;
        else {
            std::cerr << "Unsupported number of channels: " << nrChannels << " in " << filePath << std::endl;
            stbi_image_free(data);
            return 0;
        }

        glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
        if (generateMipmaps)
            glGenerateMipmap(GL_TEXTURE_2D);
    } else {
        std::cerr << "Failed to load texture: " << filePath << std::endl;
        stbi_image_free(data);
        return 0;
    }

    stbi_image_free(data);
    return textureID;
}



sun.frag
#version 330 core

out vec4 FragColor;

void main()
{
    // Give the sun a very bright color so bloom can pick it up
FragColor = vec4(4.0, 4.0, 2.0, 1.0); // Even higher RGB values
}
